{"ast":null,"code":"var _jsxFileName = \"/home/heroo/myfirstreact/src/components/map.js\";\n\n/*\nimport React, { Component } from \"react\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst MyMapComponent = withScriptjs(\n  withGoogleMap(props => (\n    <GoogleMap defaultZoom={8} defaultCenter={{ lat: 30.7333, lng: 76.7794 }}>\n      {props.isMarkerShown && (\n        <Marker position={{ lat: 30.7333, lng: 76.7794 }} />\n      )}\n    </GoogleMap>\n  ))\n);\n\nclass Map extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"text-center\">\n          <h1>GOOGLE MAPS </h1>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              MAPS\n              <div>\n                <MyMapComponent\n                  isMarkerShown\n                  googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAN7mwyR_B3NDDLnuwkLds1RU9IUSBklc8&v=3.exp&libraries=geometry,drawing,places\"\n                  loadingElement={<div style={{ height: `100%` }} />}\n                  containerElement={<div style={{ height: `400px` }} />}\n                  mapElement={<div style={{ height: `100%` }} />}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n*/\n\n/*\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCunbzMfdnxFOLObGB-YQI-tEcSIFWA39U\"\n})(Maps);\n*/\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nGeocode.setApiKey(\"AIzaSyAXlUrmHTJTzS3caN-2eGQ2UHdpUUGc2Zw\");\nGeocode.enableDebug();\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      console.log('plc', place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      console.log('res', response);\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, this.state.address))), React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '500px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/heroo/myfirstreact/src/components/map.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","setApiKey","enableDebug","Map","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","markerPosition","mapPosition","error","console","onPlaceSelected","place","log","latValue","geometry","location","lngValue","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","padding","margin","width","height","paddingLeft","marginTop","marginBottom","map","undefined"],"mappings":"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","sourcesContent":["\n/*\nimport React, { Component } from \"react\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst MyMapComponent = withScriptjs(\n  withGoogleMap(props => (\n    <GoogleMap defaultZoom={8} defaultCenter={{ lat: 30.7333, lng: 76.7794 }}>\n      {props.isMarkerShown && (\n        <Marker position={{ lat: 30.7333, lng: 76.7794 }} />\n      )}\n    </GoogleMap>\n  ))\n);\n\nclass Map extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"text-center\">\n          <h1>GOOGLE MAPS </h1>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              MAPS\n              <div>\n                <MyMapComponent\n                  isMarkerShown\n                  googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAN7mwyR_B3NDDLnuwkLds1RU9IUSBklc8&v=3.exp&libraries=geometry,drawing,places\"\n                  loadingElement={<div style={{ height: `100%` }} />}\n                  containerElement={<div style={{ height: `400px` }} />}\n                  mapElement={<div style={{ height: `100%` }} />}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n*/\n\n/*\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCunbzMfdnxFOLObGB-YQI-tEcSIFWA39U\"\n})(Maps);\n*/\n\n\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nGeocode.setApiKey( \"AIzaSyAXlUrmHTJTzS3caN-2eGQ2UHdpUUGc2Zw\" );\nGeocode.enableDebug();\n\nclass Map extends Component{\n\n\tconstructor( props ){\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\taddress: '',\n\t\t\tcity: '',\n\t\t\tarea: '',\n\t\t\tstate: '',\n\t\t\tmapPosition: {\n\t\t\t\tlat: this.props.center.lat,\n\t\t\t\tlng: this.props.center.lng\n\t\t\t},\n\t\t\tmarkerPosition: {\n\t\t\t\tlat: this.props.center.lat,\n\t\t\t\tlng: this.props.center.lng\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Get the current address from the default map position and set those values in the state\n\t */\n\tcomponentDidMount() {\n\t\tGeocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n\t\t\tresponse => {\n                console.log('res',response)\n\t\t\t\tconst address = response.results[0].formatted_address,\n\t\t\t\t      addressArray =  response.results[0].address_components,\n\t\t\t\t      city = this.getCity( addressArray ),\n\t\t\t\t      area = this.getArea( addressArray ),\n\t\t\t\t      state = this.getState( addressArray );\n\n\t\t\t\tconsole.log( 'city', city, area, state );\n\n\t\t\t\tthis.setState( {\n\t\t\t\t\taddress: ( address ) ? address : '',\n\t\t\t\t\tarea: ( area ) ? area : '',\n\t\t\t\t\tcity: ( city ) ? city : '',\n\t\t\t\t\tstate: ( state ) ? state : '',\n\t\t\t\t} )\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tconsole.error( error );\n\t\t\t}\n\t\t);\n\t};\n\t/**\n\t * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n\t *\n\t * @param nextProps\n\t * @param nextState\n\t * @return {boolean}\n\t */\n\tshouldComponentUpdate( nextProps, nextState ){\n\t\tif (\n\t\t\tthis.state.markerPosition.lat !== this.props.center.lat ||\n\t\t\tthis.state.address !== nextState.address ||\n\t\t\tthis.state.city !== nextState.city ||\n\t\t\tthis.state.area !== nextState.area ||\n\t\t\tthis.state.state !== nextState.state\n\t\t) {\n\t\t\treturn true\n\t\t} else if ( this.props.center.lat === nextProps.center.lat ){\n\t\t\treturn false\n\t\t}\n\t}\n\t/**\n\t * Get the city and set the city input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n    getCity = ( addressArray ) => {\n        let city = '';\n        for( let i = 0; i < addressArray.length; i++ ) {\n         if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n          city = addressArray[ i ].long_name;\n          return city;\n         }\n        }\n       };\n\t/**\n\t * Get the area and set the area input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n\tgetArea = ( addressArray ) => {\n\t\tlet area = '';\n\t\tfor( let i = 0; i < addressArray.length; i++ ) {\n\t\t\tif ( addressArray[ i ].types[0]  ) {\n\t\t\t\tfor ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n\t\t\t\t\tif ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n\t\t\t\t\t\tarea = addressArray[ i ].long_name;\n\t\t\t\t\t\treturn area;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * Get the address and set the address input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n\tgetState = ( addressArray ) => {\n\t\tlet state = '';\n\t\tfor( let i = 0; i < addressArray.length; i++ ) {\n\t\t\tfor( let i = 0; i < addressArray.length; i++ ) {\n\t\t\t\tif ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n\t\t\t\t\tstate = addressArray[ i ].long_name;\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * And function for city,state and address input\n\t * @param event\n\t */\n\tonChange = ( event ) => {\n\t\tthis.setState({ [event.target.name]: event.target.value });\n\t};\n\t/**\n\t * This Event triggers when the marker window is closed\n\t *\n\t * @param event\n\t */\n\tonInfoWindowClose = ( event ) => {\n\n\t};\n\n\t/**\n\t * When the marker is dragged you get the lat and long using the functions available from event object.\n\t * Use geocode to get the address, city, area and state from the lat and lng positions.\n\t * And then set those values in the state.\n\t *\n\t * @param event\n\t */\n\tonMarkerDragEnd = ( event ) => {\n\t\tlet newLat = event.latLng.lat(),\n\t\t    newLng = event.latLng.lng();\n\n\t\tGeocode.fromLatLng( newLat , newLng ).then(\n\t\t\tresponse => {\n\t\t\t\tconst address = response.results[0].formatted_address,\n\t\t\t\t      addressArray =  response.results[0].address_components,\n\t\t\t\t      city = this.getCity( addressArray ),\n\t\t\t\t      area = this.getArea( addressArray ),\n\t\t\t\t      state = this.getState( addressArray );\n\t\t\t\tthis.setState( {\n\t\t\t\t\taddress: ( address ) ? address : '',\n\t\t\t\t\tarea: ( area ) ? area : '',\n\t\t\t\t\tcity: ( city ) ? city : '',\n\t\t\t\t\tstate: ( state ) ? state : '',\n\t\t\t\t\tmarkerPosition: {\n\t\t\t\t\t\tlat: newLat,\n\t\t\t\t\t\tlng: newLng\n\t\t\t\t\t},\n\t\t\t\t\tmapPosition: {\n\t\t\t\t\t\tlat: newLat,\n\t\t\t\t\t\tlng: newLng\n\t\t\t\t\t},\n\t\t\t\t} )\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t);\n\t};\n\n\t/**\n\t * When the user types an address in the search box\n\t * @param place\n\t */\n\tonPlaceSelected = ( place ) => {\n\t\tconsole.log( 'plc', place );\n\t\tconst address = place.formatted_address,\n\t\t      addressArray =  place.address_components,\n\t\t      city = this.getCity( addressArray ),\n\t\t      area = this.getArea( addressArray ),\n\t\t      state = this.getState( addressArray ),\n\t\t      latValue = place.geometry.location.lat(),\n\t\t      lngValue = place.geometry.location.lng();\n\t\t// Set these values in the state.\n\t\tthis.setState({\n\t\t\taddress: ( address ) ? address : '',\n\t\t\tarea: ( area ) ? area : '',\n\t\t\tcity: ( city ) ? city : '',\n\t\t\tstate: ( state ) ? state : '',\n\t\t\tmarkerPosition: {\n\t\t\t\tlat: latValue,\n\t\t\t\tlng: lngValue\n\t\t\t},\n\t\t\tmapPosition: {\n\t\t\t\tlat: latValue,\n\t\t\t\tlng: lngValue\n\t\t\t},\n\t\t})\n\t};\n\n\n\trender(){\n\t\tconst AsyncMap = withScriptjs(\n\t\t\twithGoogleMap(\n\t\t\t\tprops => (\n\t\t\t\t\t<GoogleMap google={ this.props.google }\n\t\t\t\t\t           defaultZoom={ this.props.zoom }\n\t\t\t\t\t           defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{/* InfoWindow on top of marker */}\n\t\t\t\t\t\t<InfoWindow\n\t\t\t\t\t\t\tonClose={this.onInfoWindowClose}\n\t\t\t\t\t\t\tposition={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</InfoWindow>\n\t\t\t\t\t\t{/*Marker*/}\n\t\t\t\t\t\t<Marker google={this.props.google}\n\t\t\t\t\t\t        name={'Dolores park'}\n\t\t\t\t\t\t        draggable={true}\n\t\t\t\t\t\t        onDragEnd={ this.onMarkerDragEnd }\n\t\t\t\t\t\t        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Marker />\n\t\t\t\t\t\t{/* For Auto complete Search Box */}\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\theight: '40px',\n\t\t\t\t\t\t\t\tpaddingLeft: '16px',\n\t\t\t\t\t\t\t\tmarginTop: '2px',\n\t\t\t\t\t\t\t\tmarginBottom: '500px'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonPlaceSelected={ this.onPlaceSelected }\n\t\t\t\t\t\t\ttypes={['(regions)']}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</GoogleMap>\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\tlet map;\n\t\tif( this.props.center.lat !== undefined ) {\n\t\t\tmap = <div>\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"\">City</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"\">Area</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"\">State</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"\">Address</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<AsyncMap\n\t\t\t\t\tgoogleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\n\t\t\t\t\tloadingElement={\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\n\t\t\t\t\t}\n\t\t\t\t\tcontainerElement={\n\t\t\t\t\t\t<div style={{ height: this.props.height }} />\n\t\t\t\t\t}\n\t\t\t\t\tmapElement={\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t} else {\n\t\t\tmap = <div style={{height: this.props.height}} />\n\t\t}\n\t\treturn( map )\n\t}\n}\nexport default Map;"]},"metadata":{},"sourceType":"module"}